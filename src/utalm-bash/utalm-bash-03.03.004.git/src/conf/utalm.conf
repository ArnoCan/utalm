## <!--#***HEADSTART***-->
## \cond
# -*- mode: bash; -*-
#
#PROJECT:      UnifiedTraceAndLogManager
#AUTHOR:       Arno-Can Uestuensoez - acue.opensource@gmail.com
#MAINTAINER:   Arno-Can Uestuensoez - acue.opensource@gmail.com
#SHORT:        utalm-bash
#LICENSE:      Apache-2.0 + CCL-BY-SA-3.0
#
#
###
#
#   Copyright [2007,2008,2010,2013] Arno-Can Uestuensoez
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
###
#
##
## \endcond
##
## @author Arno-Can Uestuensoez
## @date 2013.10.10
## @version 03_02_001
## @file
## @brief Configuration file 
##
##
#
## \cond #KEEP# PERSISTENT
## <!--#***HEADEND***-->

if [ -z "$__UTALMCONF__" ];then #*** prevent multiple inclusion
## \endcond
## __UTALMCONF__
# Set to "1" when sourced.
# Prevents multiple inclusion
__UTALMCONF__=1 #*** prevent multiple inclusion
## \cond

function displayIt () {
	[[ "$DBGX" == 1 ]]&&echo $*
}

## \endcond
## VERSION
# Version
#
VERSION="03_02_001"
## \cond
displayIt "Use:VERSION=$VERSION"
## \endcond


## BVERSION
# Version
#
BVERSION="03_03_001"
## \cond
displayIt "Use:BVERSION=$BVERSION"
## \endcond


## LVERSION
# Version
#
LVERSION="03_01_009"
## \cond
displayIt "Use:LVERSION=$LVERSION"
## \endcond


## MYCONFPATH
#
# Node containing configuration files.
#P MYCONFPATH="${BASH_SOURCE%/*}"
## \cond
MYCONFPATH=${BASH_SOURCE%/*}
displayIt "Use:MYCONFPATH=$MYCONFPATH"
## \endcond


## BOOTSTRAP
#
# Bootstrap script - stage-0a
#P BOOTSTRAP="$(getPathToBin.sh bootstrap/bootstrap-${BVERSION}.sh)"
## \cond
BOOTSTRAP=$(getPathToBin.sh bootstrap/bootstrap-${BVERSION}.sh)
if [ -z "$BOOTSTRAP" ];then
	echo "ERROR:Missing:BOOTSTRAP=$BOOTSTRAP">&2
	exit 1
fi 
displayIt "Use:BOOTSTRAP=$BOOTSTRAP"
## \endcond

## BINDIR
#
# Binaries
#P BINDIR="${BOOTSTRAP%/*/*}"
## \cond
BINDIR=${BOOTSTRAP%/*/*}
displayIt "Use:BINDIR=$BINDIR"
## \endcond

## CORELIB
# Core library - stage-0b
#
#P CORELIB="$(getPathToLib.sh core)/"
## \cond
CORELIB=$(getPathToLib.sh core)/
export CORELIB 
if [ -z "$CORELIB" ];then
	echo "ERROR:Missing:CORELIB=$CORELIB">&2
	exit 1
fi 
displayIt "Use:CORELIB=$CORELIB"
## \endcond

## LIBDIR
#
# Libraries
#P LIBDIR="${CORELIB%core/}"
## \cond
LIBDIR=${CORELIB%core/}
export LIBDIR
displayIt "Use:LIBDIR=$LIBDIR"
## \endcond


## MYDOCBASE
# Node containing documents.
#
#P MYDOCBASE="${MYDOCBASE}"
## \cond
if [ -n "$MYDOCBASE" -a ! -d "$MYDOCBASE" ];then
	echo "ERROR:Missing:MYDOCBASE=$MYDOCBASE">&2
	exit 1
fi 
if [ -z "$MYDOCBASE" ];then
	for i in ${MANPATH//:/ };do
		[[ -d "$i" && "${i//doc/man}" != "$i" ]]&&MYDOCBASE=${i%man}&&break
	done
fi 
if [ -z "$MYDOCBASE" ];then
	echo "ERROR:Missing:MYDOCBASE=$MYDOCBASE">&2
	echo "ERROR:Check:MANPATH=$MANPATH">&2
	exit 1
fi 
displayIt "Use:MYDOCBASE=$MYDOCBASE"
export MYDOCBASE
## \endcond

## MYEXAMPLES
# Node containing examples.
#
#P MYEXAMPLES="${HOME}/examples" 
#P MYEXAMPLES="${MYDOCBASE}/examples" 
## \cond
if [ -z "$MYEXAMPLES" ];then
    MYEXAMPLES=${MYDOCBASE}/examples 
	if [ -z "$MYEXAMPLES" ];then
		echo "ERROR:Missing:MYEXAMPLES=$MYEXAMPLES">&2
		exit 1
	fi 
fi 
export EXAMPLES
displayIt "Use:MYEXAMPLES=$MYEXAMPLES"
## \endcond



## MYTMP
#
# Node containing temporary files.
#P MYTMP="${MYTMP:-/tmp}"
## \cond
MYTMP=${MYTMP:-/tmp}
if [ ! -d "$MYTMP" ];then
	displayIt "Make:MYTMP=$MYTMP"
	mkdir -p "$MYTMP"
fi 
MYTMP="${MYTMP%/}/"
displayIt "Use:MYTMP=$MYTMP"
TMP=$MYTMP
## \endcond


## TSTBASE
# Node for output of temporary test data.
#P TSTBASE="${TSTBASE}"
## \cond
TSTBASE=${TSTBASE}
export TSTBASE
## \endcond

## TSTREF
# Pathname of top node for storage of refrence data collection
#P TSTREF="${TSTREF}"
## \cond
TSTREF=${TSTREF}
export TSTREF
## \endcond

## TSTCALLROOT
# Pathname of top node for current test collection
#P TSTCALLROOT="${TSTCALLROOT}"
## \cond
TSTCALLROOT="${TSTCALLROOT}"
export TSTCALLROOT
## \endcond

# Extends PATH.
#P PATH="${BINDIR:+$BINDIR:}$PATH"
## \cond
PATH=${BINDIR:+$BINDIR:}$PATH
export PATH
displayIt "Use:PATH=$PATH"
## \endcond

## LD_LIBRARY_PATH
#
# Extends LD_LIBRARY_PATH.
#P LD_LIBRARY_PATH="${LIBDIR:+$LIBDIR:}$LD_LIBRARY_PATH"
## \cond
LD_LIBRARY_PATH=${LIBDIR:+$LIBDIR:}$LD_LIBRARY_PATH
export LD_LIBRARY_PATH
displayIt "Use:LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
## \endcond

## BROWSER
# Default BROWSER
#
# If not set, assigns BROWSER for help.
#P BROWSER="${BROWSER}"
## \cond
BROWSER=${BROWSER}
if [ -z "$BROWSER" ];then
	BROWSER=$(which "google-chrom" 2>/dev/null)
	if [ -z "$BROWSER" ];then
		BROWSER=$(which "firefox" 2>/dev/null )
	fi
fi
displayIt "Use:BROWSER=$BROWSER"
## \endcond

## PDFVIEWER
# If not set, assigns PDFVIEWER for help.
#
# PDFVIEWER="epdfview|acroreader|konquerer"
#P PDFVIEWER="${PDFVIEWER}"
## \cond
PDFVIEWER=${PDFVIEWER}
if [ -z "$PDFVIEWER" ];then
	PDFVIEWER=$(which "epdfview" 2>/dev/null)
	if [ -z "$PDFVIEWER" ];then
		PDFVIEWER=$(which "acroreader" 2>/dev/null)
		if [ -z "$PDFVIEWER" ];then
			PDFVIEWER=$(which "konquerer" 2>/dev/null)
		else
			PDFVIEWER=${BROWSER}
		fi
	fi
fi
displayIt "Use:PDFVIEWER=$PDFVIEWER"
## \endcond

## MYLANG
#
# If not set, assigns MYLANG for help.
#P MYLANG="${MYLANG:-$LANG}"
## \cond
MYLANG=${MYLANG:-$LANG}
case ${MYLANG} in
#    de*|De*|DE*) MYLANG=de;;
    en*|En*|EN*) MYLANG=en;;
    *)           MYLANG=en;;
esac
displayIt "Use:MYLANG=$MYLANG"
## \endcond

## MANPATH
# Extends MANPATH.
#
## @ingroup libutalm
#P MANPATH_ORG="${MANPATH}"
#P MANPATH="${BASE}doc-tmp/${VARIANT}/doc/${OUTLANG}/man:${MANPATH_ORG}"
## \cond
MANPATH_ORG=${MANPATH}
MANPATH=${HOME}/doc/${OUTLANG}/man:$MANPATH_ORG
[[ -e "${BASE}doc-tmp/${VARIANT}/doc/${OUTLANG}/man" ]]&&MANPATH="${BASE}doc-tmp/${VARIANT}/doc/${OUTLANG}/man:$MANPATH"
export MANPATH
displayIt "Use:MANPATH=$MANPATH"
## \endcond

## DEFAULT_HELP
# Default help to be displayed.
#
#P DEFAULT_HELP="${MYDOCBASE}/html/man3/utalm-bash-API/index.html"
## \cond
DEFAULT_HELP=${MYDOCBASE}/html/man3/utalm-API/index.html
export DEFAULT_HELP
displayIt "Use:DEFAULT_HELP=$DEFAULT_HELP"
## \endcond

## MANPATH
# Default man.
#
#P MANPATH="${MYDOCBASE}/${MYLANG}/man:${MANPATH}"
## \cond
MANPATH=${MYDOCBASE}/${MYLANG}/man:${MANPATH}
displayIt "Use:MANPATH=$MANPATH"
## \endcond


## 
# Path to help.
#
#P MYHELPPATH="${MYHELPPATH:-$MYLIBPATH/help/$MYLANG}"
## \cond
MYHELPPATH=${MYHELPPATH:-$MYLIBPATH/help/$MYLANG}
displayIt "Use:MANPATH=$MANPATH"
## \endcond

## 
# Path to macros.
#
#P MYMACROPATH="${MYMACROPATH:-$HOME/conf/macros}"
## \cond
MYMACROPATH=${MYMACROPATH:-$HOME/conf/macros}
displayIt "Use:MANPATH=$MYMACROPATH"
## \endcond

## #
# Path to macros.
#
#P MYPKGPATH="${MYPKGPATH:-$MYLIBPATH/plugins}"
## \cond
MYPKGPATH=${MYPKGPATH:-$MYLIBPATH/plugins}
displayIt "Use:MANPATH=$MYPKGPATH"
## \endcond

## 
# Search path for executables.
#
#P PATH="${MYLIBEXECPATH:-$MYLIBEXECPATH:$PATH}"
## \cond
PATH=${MYLIBEXECPATH:-$MYLIBEXECPATH:$PATH}
displayIt "Use:PATH=$PATH"


displayIt

fi #*** prevent multiple inclusion
## \endcond #KEEP# PERSISTENT
