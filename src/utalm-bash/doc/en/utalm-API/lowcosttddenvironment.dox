/*
* PROJECT:      UnifiedTraceAndLogManager
* AUTHOR:       Arno-Can Uestuensoez - acue.opensource@gmail.com
* MAINTAINER:   Arno-Can Uestuensoez - acue.opensource@gmail.com
* SHORT:        utalm-bash
* LICENSE:      CCL-3.0-BY-SA - http://creativecommons.org/licenses/by-sa/3.0/legalcode
* VERSION:      03_03_001
*
* Copyright [2007,2008,2010,2013] Arno-Can Uestuensoez
*
*/

/**
* \page lowcosttdd UTALM as a Low-Cost TDD Environment
* \brief Common application of Test-Driven-Development requires cost-efficiency and technical simplicity
*  \par
*
 * The UTALM provides a simple approach of command line based regression and unit testing.
 * This enables particularly the test of applications written in any programming language.
 * The main focus of design is the support for simple provisioning from small adhoc tools
 * up to complex applications with huge amounts of data.
 * The common task is to provision of the reference data for smoke tests with limited  
 * overall effort. Thus the UTALM provides inherent reference
 * data creation from runtime systems. The data is stored into persistent 
 * files on the fly when requested, and could be post-referenced for smoke-tests as required. 
 * This requires just the execution of the component to be later test-tracked by repetitive calls. 
 * The test-entity could be either a complete system, or a component executed in a wrapper.
 * The only requirement is the output of significant data for the decision
 * of success, which could be catch and stored persistently. The output could be 
 * written by one of UTALMs provided native language support libraries, or 
 * by provided generic call wrappers for filtering of applications data and storage.
 *
 * The storage of reference data in the file system controlled by parameters 
 * allows for simple management of versions and releases and the archiving of related 
 * data to specific production versions. Thus the the handling for multiple versions
 * could be highly simplified by putting the reference data into the same repository 
 * as the code to be maintained.
 * 
 * The basic intention for the design of the UTALM is to build a common system for
 * the handling of data for integrated systems assembled by a bunch of applications
 * written in several languages and possibly running on multiple OSs. 
 * Therefore the base system relies on the command line utilities including Makefiles,
 * which guarantees for applicability onto almost all modern and legacy systems running
 * UNIX like and derived OSs.
 *
 * The Makefile library contains a set of Makefiles and templates to be included
 * in order to handle the recursive processing of directory trees. The basic design
 * applied by the UTALM is to set up a generic node processing environment, acting
 * as a "treewalker" which uses either generic functions, or custom callbacks and
 * Makefiles for contained in the specific directory nodes. The so called 
 * **nodeaction** for a specific **filesystem-node** of type **directory**
 * acts as a container of class attributes and methods, implementing required 
 * features. These are e.g. copy-collectors for packaging, document generation
 * configurations, or test-wrappers and test cases.  
 *
 * The **Makefile** library contains also prepared rules and templates for
 * several document automation tools to generate API and test documentation
 * from the source code.
 * Thus the additional effort for documentation could be minimized and extended
 * case-by-case as required.
 *
 *
 * The provided **bash** library and tools support the automation of the
 * build, documentation, and packaging process. This covers also the integrated
 * regression test for quality assurance. The bash component contains the basic
 * tools for test environments and the automation support libraries for custom
 * scripts.
 *
 * Another subcomponent for automation is the **awk** component, which provides 
 * native integration of awk-scripts into the utalm-bash based logging.
 *
 *       
 */
